name: Multi-Container CI

env:
  CI: "true"
  BASIC_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
  BASIC_AUTH_PASS: ${{ secrets.BASIC_AUTH_PASS }}
  TRAEFIK_AUTH_USER: ${{ secrets.BASIC_AUTH_USER }}
  TRAEFIK_AUTH_HASH: ${{ secrets.BASIC_AUTH_HASH }}
  LE_EMAIL: ${{ secrets.LE_EMAIL }}
  DOMAIN: ${{ vars.DOMAIN }}
  DASH_DOMAIN: ${{ vars.DASH_DOMAIN }}

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: llm-node

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set TEST_MODE for CI
        run: echo "TEST_MODE=1" >> .env

      - name: Write .env file from secrets
        run: |
          echo "BASIC_AUTH_USER=${BASIC_AUTH_USER}" >> .env
          echo "BASIC_AUTH_PASS=${BASIC_AUTH_PASS}" >> .env
          echo "TRAEFIK_AUTH_USER=${BASIC_AUTH_USER}" >> .env
          echo "TRAEFIK_AUTH_HASH=${BASIC_AUTH_HASH}" >> .env
          echo "DOMAIN=${DOMAIN}" >> .env
          echo "DASH_DOMAIN=${DASH_DOMAIN}" >> .env
          echo "LE_EMAIL=${LE_EMAIL}" >> .env

      - name: Create dummy model file
        run: |
          mkdir -p ./test-models
          touch ./test-models/Meta-Llama-3-8B-Instruct.Q4_0.gguf

      - name: Build and start stack
        run: docker-compose up -d --build

      - name: Wait for Traefik
        run: |
          for i in {1..15}; do
            if curl -u "$BASIC_AUTH_USER:$BASIC_AUTH_PASS" -X POST -d '{"prompt": "test"}' -H 'Content-Type: application/json' -H 'Host: llm.localhost' http://llm.localhost/generate --fail; then
              echo "Traefik public endpoint is up!"
              exit 0
            fi
            sleep 2
          done
          echo "❌ Traefik public endpoint did not respond after 15 seconds"
          docker-compose logs --no-color traefik llm-api
          exit 1

      - name: Wait for LLM-API
        run: |
          for i in {1..15}; do
            if curl -s -u "$BASIC_AUTH_USER:$BASIC_AUTH_PASS" http://localhost:8080/generate --fail; then
              echo "API is up!"
              exit 0
            fi
            sleep 2
          done
          echo "❌ API did not respond after 15 seconds"
          docker-compose logs llm-api
          exit 1

      - name: Dump logs and check for expected errors
        if: always()
        run: |
          docker compose logs --no-color traefik llm-api > logs.txt
          cat logs.txt

          # Allow expected model error, fail on anything else
          if grep -q "Unsupported file format" logs.txt; then
            echo "✅ Model load failed as expected in CI (dummy file used)."
            exit 0
          elif grep -q "gguf_init_from_file" logs.txt; then
            echo "✅ Model GGUF init error as expected in CI."
            exit 0
          else
            echo "❌ Unexpected error. See above logs."
            exit 1
          fi

      - name: Install test dependencies
        run: pip install httpx

      - name: Run integration test
        run: python test_main.py
